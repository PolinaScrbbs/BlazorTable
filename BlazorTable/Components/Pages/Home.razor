@page "/"
@using BlazorTable.Components.Models
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<style>
    .form-control:focus {
        border-color: #000;
        box-shadow: 0 0 0 0.25rem rgba(0, 0, 0, 0.25);
    }
</style>

@code {
    private List<ElementType> _elementTypes;
    private Dictionary<ElementType, List<string>> _elementsByType;
    private int _maxRows;
    private string _searchTerm = string.Empty;
    private List<Element> allElements;

    protected override void OnInitialized()
    {
        _elementTypes = new List<ElementType>
        {
            new("IPv4"),
            new("IPv6"),
            new("Mac"),
            new("Text")
        };

        InitializeElements();
        ApplyFilters();
    }

    private void InitializeElements()
    {
        allElements = new List<Element>
        {
            new("192.168.1.1", _elementTypes[0]),
            new("10.0.0.1", _elementTypes[0]),
            new("172.16.0.5", _elementTypes[0]),
            new("8.8.8.8", _elementTypes[0]),
            new("203.0.113.42", _elementTypes[0]),

            new("2001:0db8:85a3:0000:0000:8a2e:0370:7334", _elementTypes[1]),
            new("fe80::1", _elementTypes[1]),
            new("2001:4860:4860::8888", _elementTypes[1]),
            new("fd12:3456:789a:1::1", _elementTypes[1]),
            new("::1", _elementTypes[1]),

            new("00:1A:2B:3C:4D:5E", _elementTypes[2]),
            new("AA:BB:CC:DD:EE:FF", _elementTypes[2]),
            new("00-14-22-01-23-45", _elementTypes[2]),
            new("3C:97:0E:12:34:56", _elementTypes[2]),
            new("FC:FB:FB:01:FA:21", _elementTypes[2]),

            new("Привет", _elementTypes[3]),
            new("Hola", _elementTypes[3]),
            new("Bonjour", _elementTypes[3]),
            new("Hallo", _elementTypes[3]),
            new("こんにちは", _elementTypes[3])
        };
    }

    private void ApplyFilters()
    {
        _elementsByType = _elementTypes.ToDictionary(
            type => type,
            type => allElements
                .Where(e => e.Type == type)
                .Select(e => e.Title)
                .ToList()
        );

        _maxRows = _elementsByType.Values.Max(list => list.Count);
    }

    private Dictionary<ElementType, List<string>> FilteredElementsByType =>
        _elementsByType.ToDictionary(
            type => type.Key,
            type => type.Value.Where(e => string.IsNullOrWhiteSpace(_searchTerm) || e.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList()
        );

}

<div class="container">
    <div class="row">
        <div class="col-10">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">Input</span>
                </div>
                <input type="text" class="form-control"
                       aria-label="Default"
                       aria-describedby="inputGroup-sizing-default"
                       @bind-value="_searchTerm"/>
            </div>
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-dark w-100" @onclick="ApplyFilters">Find</button>
        </div>
    </div>

    <table class="table">
        <thead>
        <tr>
            @foreach (var elementType in _elementTypes)
            {
                <th scope="col">@elementType.Title</th>
            }
        </tr>
        </thead>
        <tbody>
        @for (var row = 0; row < _maxRows; row++)
        {
            <tr>
                @foreach (var elementType in _elementTypes)
                {
                    <td>
                        @{
                            var elements = FilteredElementsByType[elementType]
                                .Select(title => allElements.First(e => e.Title == title))
                                .ToList();
                        }
                        @if (row < elements.Count)
                        {
                            var element = elements[row];
                            <span style="color: @(element.IsValidated ? "black" : "red")">
                        @element.Title
                    </span>
                        }
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
</div>
